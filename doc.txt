cube.scale.x = -1;


https://stackoverflow.com/questions/39441459/rigid-body-shape-in-bullet-ammo-js-from-a-mesh-in-three-js




///The btRigidBody is the main class for rigid body objects. It is derived from btCollisionObject, so it keeps a pointer to a btCollisionShape.
///It is recommended for performance and memory use to share btCollisionShape objects whenever possible.
///There are 3 types of rigid bodies: 
///- A) Dynamic rigid bodies, with positive mass. Motion is controlled by rigid body dynamics.
///- B) Fixed objects with zero mass. They are not moving (basically collision objects)
///- C) Kinematic objects, which are objects without mass, but the user can move them. There is on-way interaction, and Bullet calculates a velocity based on the timestep and previous and current world transform.
///Bullet automatically deactivates dynamic rigid bodies, when the velocity is below a threshold for a given time.
///Deactivated (sleeping) rigid bodies don't take any processing time, except a minor broadphase collision detection impact (to allow active objects to activate/wake up sleeping objects)
class btRigidBody  : public btCollisionObject


set flag to 2: body.setCollisionFlags( 2 ) // 0 is static 1 dynamic 2 kinematic
and state to 4: body.setActivationState( 4 ) // never sleep

     body.setCollisionFlags(body.getCollisionFlags() | pc.BODYFLAG_KINEMATIC_OBJECT);
                    body.setActivationState(pc.BODYSTATE_DISABLE_DEACTIVATION);


https://github.com/snowfrogdev/playcanvas-typings/blob/master/engine/framework/components/rigid-body.d.ts/constants.d.ts

    // Collision flags
    const BODYFLAG_STATIC_OBJECT = 1;
    const BODYFLAG_KINEMATIC_OBJECT = 2;
    const BODYFLAG_NORESPONSE_OBJECT = 4;

    // Activation states
    const BODYSTATE_ACTIVE_TAG = 1;
    const BODYSTATE_ISLAND_SLEEPING = 2;
    const BODYSTATE_WANTS_DEACTIVATION = 3;
    const BODYSTATE_DISABLE_DEACTIVATION = 4;
    const BODYSTATE_DISABLE_SIMULATION = 5;

//apply force
btVector3 relativeForce = btVector3(0,10,0);
btTransform* boxTrans;
boxRigidBody->getMotionState()->getWroldTransform(boxTrans);
btVector3 correctedForce = (boxTrans * relativeForce) - boxTrans.getOrigin();
boxRigidBody->applyCentralForce(correctedForce);
